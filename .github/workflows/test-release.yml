# Only run on feature/sign-windows push
name: Release Executables Binaries

on:
  push:
    branches:
      - feature/sign-windows
jobs:
  release:
    runs-on: ${{ matrix.os }}
    environment: deployment

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: setup dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: sudo apt-get update && sudo apt-get install -y libusb-1.0-0-dev  libudev-dev

      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 12

      - name: Install deps with big timeout
        run: |
          yarn install --network-timeout 600000

      - name: Install Snapcraft
        uses: samuelmeuli/action-snapcraft@v1
        # Only install Snapcraft on Ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        with:
          # Log in to Snap Store
          snapcraft_token: ${{ secrets.snapcraft_token }}

      - name: Install AzureSignTool
        if: startsWith(matrix.os, 'windows')
        run: dotnet tool install --global AzureSignTool

      - name: Extract current branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Log release reference
        run: |
          echo "********* START RELEASE REF **********"
          echo ${{ github.ref }}
          echo ${{ steps.extract_branch.outputs.branch }}
          echo "********* END RELEASE REF ************"

      - name: Prepare for app notarization (MacOS)
        if: startsWith(matrix.os, 'macos')
        # Import Apple API key for app notarization on macOS
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.mac_api_key }}' > ~/private_keys/AuthKey_${{ secrets.mac_api_key_id }}.p8

      - name: Build/release Electron app (MacOS, Ubuntu)
        uses: samuelmeuli/action-electron-builder@v1
        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')
        with:

          build_script_name: electron:pre-build

          # GitHub token, automatically provided to the action
          # (No need to define this secret in the repo settings)
          github_token: ${{ secrets.github_token }}

          # When a push is done to feature/sign-windows, the action builds binaries for all OS and they are then released directly
          release: ${{ steps.extract_branch.outputs.branch == 'feature/sign-windows' }}

          mac_certs: ${{ secrets.mac_certs }}
          mac_certs_password: ${{ secrets.mac_certs_password }}

      - name: Sign package 
        if: startsWith(matrix.os, 'windows')
        run: |
              Get-ChildItem -recurse -Include **.msix | ForEach-Object {
              $msixPath = $_.FullName
              & AzureSignTool sign -kvu "${{ secrets.azure_key_vault_url }}" -kvi "${{ secrets.azure_key_vault_client_id }}" -kvt "${{ secrets.azure_key_vault_tenant_id }}" -kvs "${{ secrets.azure_key_vault_client_secret }}" -kvc ${{ secrets.azure_key_vault_name }} -tr http://timestamp.digicert.com -v $msixPath
              }

      - name: Release Electron app (Windows)
        env:
          github_token: ${{ secrets.github_token }}
          binary: deploy-windows
        run: |
          curl -X POST \
          -H 'Content-Type: application/x-executable' \
          --data-binary @${binary} \
          https://${github_actor}:${{ secrets.github_token }}@uploads.github.com/repos/${github_repository}/releases/${{ steps.create_release.outputs.release_id }}/assets?name=${binary}

